// Ë®òÂè∑
const SYM_BLANK = "";
const SYM_LEVEL = "üåü";

// ÊñáÂ≠óÂàó
COLOR_RED = "red";
COLOR_GREEN = "green";

LEVEL_EASY = "easy";
LEVEL_MEDIUM = "medium";
LEVEL_HARD = "hard";

// „É°„ÉÉ„Çª„Éº„Ç∏ÂÆöÁæ©
const MSG_INFO_ANSWER_EXAMPLE = "Ëß£„ÅÆ‰æã:";
const MSG_INFO_INPUT_USER = "„É¶„Éº„Ç∂Âêç(Ëã±Êï∞Â≠ó)„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
const MSG_INFO_OK_ANSWER = "Ê≠£Ëß£„Åß„Åô!";
const MSG_INFO_OK_RANK = "Êñ∞Ë®òÈå≤ÔºÅ„É©„É≥„ÇØ„Ç§„É≥„Åó„Åæ„Åó„ÅüÔºÅ";

const MSG_ERR_NO_ANSWER = "„Åì„ÅÆÂïèÈ°å„Å´„ÅØËß£„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü";
const MSG_ERR_NO_INPUT = "ÂÖ•ÂäõÂÄ§„Åå„ÅÇ„Çä„Åæ„Åõ„Çì";
const MSG_ERR_DIGIT = "4„Å§„ÅÆÊï∞Â≠ó„Çí1Âõû„Åö„Å§‰Ωø„Å£„Å¶„Åè„Å†„Åï„ÅÑ!";
const MSG_ERR_EQUAL = "„Ç§„Ç≥„Éº„É´„ÅØ1„Å§„Å†„Åë‰Ωø„Å£„Å¶„Åè„Å†„Åï„ÅÑ!";
const MSG_ERR_FORMAT = "Êï∞Âºè„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì!";
const MSG_ERR_DIVIDE_BY_ZERO = "„Çº„É≠Èô§ÁÆó„ÅØ„Åß„Åç„Åæ„Åõ„Çì!";
const MSG_ERR_MATCH = "Ë®àÁÆóÁµêÊûú„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì!";
const MSG_ERR_RANK = "„É©„É≥„ÇØÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü";

// URL
const URL_SERVER = "https://kobe-dev.koyeb.app";
const URL_LOCAL = "http://127.0.0.1:5000"
const URL_RANKING_API = "/number/ranking";
const URL_RANKING_SERVER = `${URL_SERVER}${URL_RANKING_API}`;
const URL_RANKING_LOCAL = `${URL_LOCAL}${URL_RANKING_API}`;

// „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´sessionStorage„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
let userName = sessionStorage.getItem('userName');

// „Çø„Ç§„Éû„ÉºID
let timerId = null;

// ÂàùÊúüË°®Á§∫
function initDisplay(level) {
  setLevel(level);
  setTimer();
  setUserName();
}

// „É¨„Éô„É´Ë®≠ÂÆö
function setLevel(level) {
  let levelVal = SYM_LEVEL;
  if (level == LEVEL_MEDIUM) {
    levelVal = SYM_LEVEL.repeat(2);
  } else if (level == LEVEL_HARD) {
    levelVal = SYM_LEVEL.repeat(3);
  }
  const levelElem = document.getElementById('level');
  levelElem.textContent = "„É¨„Éô„É´Ôºö" + levelVal;
}

// „Çø„Ç§„Éû„ÉºË®≠ÂÆö
function setTimer() {
  let sec = 30.00;
  const timerElem = document.getElementById('timer');
  timerElem.textContent = sec.toFixed(2);

  timerId = setInterval(() => {
    sec -= 0.01;
    timerElem.textContent = sec.toFixed(2);
    if (sec <= 0) {
      clearInterval(timerId);
      timerElem.textContent = "ÊôÇÈñìÂàá„Çå";
    }
    if (sec <= 10) {
      timerElem.classList.add(COLOR_RED);
    } else {
      timerElem.classList.remove(COLOR_RED);
    }
  }, 10);
}

// „É¶„Éº„Ç∂ÂêçË®≠ÂÆö
function setUserName() {
  if (!userName || userName == SYM_BLANK) {
    userName = prompt(MSG_INFO_INPUT_USER);
    sessionStorage.setItem('userName', userName);
  }
}

// Ê≠£Ëß£Âà§ÂÆö
function checkAnswer() {
  // DOMÂèñÂæó
  const numberDisplay = document.getElementById('number-display');
  const numberAnswer = document.getElementById('number-answer');
  const rankTime = document.getElementById('rank-time');
  const timer = document.getElementById('timer');
  const expression = document.getElementById('expression');

  const num = numberDisplay.textContent;
  const ans = numberAnswer.textContent;
  const rank = rankTime.textContent;
  const timeVal = timer.textContent;
  const expr = expression.value.trim();

  let chkMsg = validate(num, ans, expr);

  if (chkMsg) {
    showMessage(chkMsg, false);
  } else {
    if (ans) {
      let ansList = ans;
      if (typeof ans === "string") {
        ansList = ans.split(";").filter(s => s.trim());
      }
      const ansHtml = '<ul>' + ansList.map(a => `<li>${a}</li>`).join('') + '</ul>';
      showMessage(MSG_INFO_OK_ANSWER + ansHtml, true);

      const clearTime = 30 - parseFloat(timeVal);
      const clearTimeVal = clearTime.toFixed(2);
      const rankTimeVal = parseFloat(rank);
      if (clearTime != null && clearTimeVal < rankTimeVal) {
        const numVal = parseInt(num);
        sendRanking(numVal, clearTimeVal);
      }
      clearInterval(timerId);
    } else {
      showMessage(MSG_ERR_NO_ANSWER, false);
    }
  }
};

// ÂÖ•Âäõ„ÉÅ„Çß„ÉÉ„ÇØ
function validate(num, ans, expr) {
  let chkMsg = SYM_BLANK;

  // ÂõûÁ≠îÂÖ•Âäõ„ÉÅ„Çß„ÉÉ„ÇØ
  if (expr == SYM_BLANK) {
    return MSG_ERR_NO_INPUT;
  }

  // Êï∞Â≠ó„ÉÅ„Çß„ÉÉ„ÇØ
  const numDigits = num.split('').join('');
  const exprDigits = expr.split('').filter(c => /\d/.test(c)).join('');
  if (exprDigits !== numDigits) {
    return MSG_ERR_DIGIT;
  }

  // „Ç§„Ç≥„Éº„É´1„Å§„ÅÆ„Åø
  if ((expr.match(/=/g) || []).length !== 1) {
    return MSG_ERR_EQUAL;
  }

  const [left, right] = expr.split('=');
  try {
    // ÂÖ•Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØÔºàÊï∞Â≠ó„ÉªÊºîÁÆóÂ≠ê„ÅÆ„ÅøÔºâ
    if (!/^[\d+\-*/.\s]+$/.test(left) || !/^[\d+\-*/.\s]+$/.test(right)) {
      return MSG_ERR_FORMAT;
    }
  } catch (e) {
    return MSG_ERR_FORMAT;
  }

  // „Çº„É≠Èô§ÁÆó„ÉÅ„Çß„ÉÉ„ÇØ
  if (expr.includes("/0")) {
    return MSG_ERR_DIVIDE_BY_ZERO;
  }

  // Ë®àÁÆóÁµêÊûúÊØîËºÉ
  if (!ans.includes(expr)) {
    return MSG_ERR_MATCH;
  }

  return chkMsg;
}

// „É©„É≥„Ç≠„É≥„Ç∞ÈÄÅ‰ø°
function sendRanking(number, time) {
  let rankingUrl = URL_RANKING_SERVER;
  if (isLocal()) {
    rankingUrl = URL_RANKING_LOCAL;
  }

  fetch(rankingUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      number: number,
      user: userName,
      time: time,
      date: new Date()
    })
  })
    .then(res => res.json())
    .then(data => {
      console.log(data.message);
      showMessage(MSG_INFO_OK_RANK, true);
    })
    .catch(() => {
      alert(MSG_ERR_RANK);
    });
}

// „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
function showMessage(msg, answerFlg) {
  setElem('message', msg, false, answerFlg);
}

// Ë¶ÅÁ¥†Ë®≠ÂÆö
function setElem(elemId, text, textFlg, answerFlg) {
  const elem = document.getElementById(elemId);
  if (textFlg) {
    elem.textContent = text;
  } else {
    elem.innerHTML = text;
  }

  let color = COLOR_RED;
  if (answerFlg) {
    color = COLOR_GREEN;
  }

  const style = 'color:' + color + ';';
  elem.style = style;
}

// „É≠„Éº„Ç´„É´Áí∞Â¢ÉÂà§ÂÆö
function isLocal() {
  let localFlg = false;
  if (window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1") {
    localFlg = true;
  }
  return localFlg;
};
